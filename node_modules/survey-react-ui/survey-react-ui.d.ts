/*
* Type definition for Survey JavaScript library for React (without core) v1.9.41
* Copyright (c) 2015-2022 Devsoft Baltic OÃœ  - https://surveyjs.io/
* License: MIT (http://www.opensource.org/licenses/mit-license.php)
*/
import { Action, PopupModel, ActionContainer, Question, SurveyError } from "survey-core";
import { SurveyModel, QuestionMatrixDropdownRenderedRow, QuestionMatrixDropdownModelBase, ListModel, HashTable } from "survey-core";
import { QuestionRowModel, SurveyElement, QuestionSelectBase, ItemValue, QuestionMatrixDropdownRenderedCell } from "survey-core";
import { LocalizableString, Base, ITitleOwner, PopupBaseViewModel, PageModel } from "survey-core";
import { ButtonGroupItemModel, QuestionButtonGroupModel, ButtonGroupItemValue, PanelModelBase, SurveyProgressButtonsModel } from "survey-core";
import { IElement, ActionDropdownViewModel, TooltipManager, MultipleTextItemModel, PanelModel } from "survey-core";
import { QuestionBooleanModel, QuestionCheckboxModel, QuestionEmptyModel, QuestionExpressionModel, QuestionFileModel } from "survey-core";
import { QuestionHtmlModel, QuestionImageModel, QuestionImagePickerModel, ImageItemValue, QuestionMatrixModel } from "survey-core";
import { AdaptiveActionContainer, QuestionMatrixDynamicModel, MatrixDropdownColumn, QuestionMultipleTextModel, QuestionPanelDynamicModel } from "survey-core";
import { QuestionRadiogroupModel, QuestionRankingModel, QuestionRatingModel, RenderedRatingItem, QuestionSignaturePadModel } from "survey-core";
import { SurveyTimerModel, SurveyWindowModel, FlowPanelModel, QuestionCommentModel, QuestionCompositeModel } from "survey-core";
import { QuestionCustomModel, QuestionTextModel, IArrayPropertyDecoratorOptions, IAttachKey2clickOptions } from "survey-core";
import * as React from "react";

export { SurveyModel } from "survey-core";
export { Model } from "survey-core";
export { SurveyWindowModel } from "survey-core";
export { settings } from "survey-core";
export { surveyLocalization } from "survey-core";
export { surveyStrings } from "survey-core";

export enum DragTypeOverMeEnum {
  InsideEmptyPanel = 1,
  MultilineRight,
  MultilineLeft
}
export interface IActionBarItemProps {
  item: Action;
}
export interface IPopupProps {
  model: any;
}
export interface IActionBarProps {
  model: any;
  handleClick?: boolean;
}
export interface ISurveyCreator {
  createQuestionElement(question: Question): any;
  renderError(key: string, error: SurveyError, cssClasses: any): any;
  questionTitleLocation(): string;
  questionErrorLocation(): string;
}
export interface ISurveyHeaderProps {
  survey: SurveyModel;
}
export interface IMatrixRowProps {
  model: QuestionMatrixDropdownRenderedRow;
  parentMatrix: QuestionMatrixDropdownModelBase;
}
export interface IListItemProps {
  model: ListModel;
  item: any;
}
export interface IListProps {
  model: ListModel;
}
export interface ILogoImageProps {
  data: SurveyModel;
}
export declare class BrandInfo extends React.Component<any, any> {
  constructor(props: any);
  constructor(props: any, context: any);
  render(): JSX.Element;
}
export declare class LogoImage extends React.Component<ILogoImageProps, any> {
  constructor(props: ILogoImageProps);
  render(): JSX.Element;
}
export declare class ReactElementFactory {
  static Instance: ReactElementFactory;
  creatorHash: any;
  registerElement(elementType: string, elementCreator: (props: any) => JSX.Element): void;
  getAllTypes(): Array<any>;
  isElementRegistered(elementType: string): boolean;
  createElement(elementType: string, params: any): JSX.Element;
}
export declare class ReactQuestionFactory {
  static Instance: ReactQuestionFactory;
  creatorHash: any;
  registerQuestion(questionType: string, questionCreator: (name: string) => JSX.Element): void;
  getAllTypes(): Array<any>;
  createQuestion(questionType: string, params: any): JSX.Element;
}
export declare class ReactSurveyElementsWrapper {
  static wrapRow(survey: SurveyModel, element: JSX.Element, row: QuestionRowModel): JSX.Element;
  static wrapElement(survey: SurveyModel, element: JSX.Element, question: SurveyElement): JSX.Element;
  static wrapQuestionContent(survey: SurveyModel, element: JSX.Element, question: SurveyElement): JSX.Element;
  static wrapItemValue(survey: SurveyModel, element: JSX.Element, question: QuestionSelectBase, item: ItemValue): JSX.Element;
  static wrapMatrixCell(survey: SurveyModel, element: JSX.Element, cell: QuestionMatrixDropdownRenderedCell, reason?: string): JSX.Element;
}
export declare class Skeleton extends React.Component<any, any> {
  constructor(props: any);
  constructor(props: any, context: any);
  render(): JSX.Element;
}
export declare class SurveyActionBarSeparator extends React.Component<any, any> {
  constructor(props: any);
  render(): JSX.Element;
}
export declare class SurveyElementBase<P, S> extends React.Component<P, S> {
  constructor(props: any);
  static renderLocString(locStr: LocalizableString, style?: any, key?: string): JSX.Element;
  changedStatePropNameValue: string;
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  _allowComponentUpdate: boolean;
  protected allowComponentUpdate(): void;
  protected denyComponentUpdate(): void;
  shouldComponentUpdate(nextProps: any, nextState: any): boolean;
  render(): JSX.Element;
  protected wrapElement(element: JSX.Element): JSX.Element;
  protected get isRendering(): boolean;
  protected getRenderedElements(): Array<Base>;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
  protected get changedStatePropName(): string;
  protected getStateElements(): Array<Base>;
  protected getStateElement(): Base;
  protected get isDisplayMode(): boolean;
  protected renderLocString(locStr: LocalizableString, style?: any): JSX.Element;
  protected canUsePropInState(key: string): boolean;
}
export declare class SurveyElementHeader extends React.Component<any, any> {
  constructor(props: any);
  constructor(props: any, context: any);
  render(): JSX.Element;
  protected renderDescription(): JSX.Element;
}
export declare class SurveyHeader extends React.Component<ISurveyHeaderProps, any> {
  constructor(props: ISurveyHeaderProps);
  componentDidMount(): void;
  componentWillUnmount(): void;
  render(): JSX.Element;
}
export declare class SurveyLocStringEditor extends React.Component<any, any> {
  constructor(props: any);
  componentDidMount(): void;
  componentWillUnmount(): void;
  onInput: (event: any) => void;
  onClick: (event: any) => void;
  render(): JSX.Element;
}
export declare class SurveyLocStringViewer extends React.Component<any, any> {
  constructor(props: any);
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  isRendering: boolean;
  render(): JSX.Element;
  protected renderString(): JSX.Element;
}
export declare class SurveyNavigationBase extends React.Component<any, any> {
  constructor(props: any);
  protected get survey(): SurveyModel;
  protected get css(): any;
  updateStateFunction: any;
  componentDidMount(): void;
  componentWillUnmount(): void;
}
export declare class SvgIcon extends React.Component<any, any> {
  constructor(props: any);
  svgIconRef: any;
  updateSvg(): void;
  componentDidUpdate(): void;
  render(): JSX.Element;
  componentDidMount(): void;
}
export declare class TitleActions extends React.Component<any, any> {
  constructor(props: any);
  constructor(props: any, context: any);
  protected get cssClasses(): any;
  protected get element(): SurveyElement;
  render(): JSX.Element;
}
export declare class TitleContent extends React.Component<any, any> {
  constructor(props: any);
  render(): JSX.Element;
  protected renderTitleSpans(element: ITitleOwner, cssClasses: any): Array<Element>;
}
export declare class TitleElement extends React.Component<any, any> {
  constructor(props: any);
  render(): JSX.Element;
}
export declare class List extends SurveyElementBase<IListProps, any> {
  constructor(props: any);
  get model(): ListModel;
  handleKeydown: (event: any) => void;
  getStateElement(): ListModel;
  renderElement(): JSX.Element;
  renderItems(): any;
  searchElementContent(): JSX.Element;
}
export declare class ListItem extends SurveyElementBase<IListItemProps, any> {
  constructor(props: any);
  get model(): ListModel;
  get item(): any;
  handleKeydown: (event: any) => void;
  getStateElement(): any;
  render(): JSX.Element;
}
export declare class MatrixRow extends SurveyElementBase<IMatrixRowProps, any> {
  constructor(props: IMatrixRowProps);
  get model(): QuestionMatrixDropdownRenderedRow;
  get parentMatrix(): QuestionMatrixDropdownModelBase;
  protected getStateElement(): QuestionMatrixDropdownRenderedRow;
  protected onPointerDownHandler: (event: any) => void;
  render(): JSX.Element;
}
export declare class Popup extends SurveyElementBase<IPopupProps, any> {
  constructor(props: IPopupProps);
  popup: PopupBaseViewModel;
  containerRef: any;
  get model(): any;
  protected getStateElement(): PopupModel;
  componentDidMount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  componentWillUnmount(): void;
  shouldComponentUpdate(nextProps: IPopupProps, nextState: any): boolean;
  render(): JSX.Element;
}
export declare class PopupContainer extends SurveyElementBase<any, any> {
  constructor(props: any);
  prevIsVisible: boolean;
  handleKeydown: (event: any) => void;
  get model(): PopupBaseViewModel;
  protected getStateElement(): PopupBaseViewModel;
  clickInside: (ev: any) => void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  renderContainer(): JSX.Element;
  renderPointer(): JSX.Element;
  renderHeader(): JSX.Element;
  renderContent(): JSX.Element;
  renderCancelButton(): JSX.Element;
  renderApplyButton(): JSX.Element;
  renderFooter(): JSX.Element;
  render(): JSX.Element;
}
export declare class ReactSurveyElement extends SurveyElementBase<any, any> {
  constructor(props: any);
  protected get cssClasses(): any;
}
export declare class Survey extends SurveyElementBase<any, any> implements ISurveyCreator {
  constructor(props: any);
  previousJSON: any;
  rootRef: any;
  static get cssType(): string;
  static set cssType(val: string);
  protected survey: SurveyModel;
  rootNodeId: string;
  rootNodeClassName: string;
  protected getStateElement(): Base;
  shouldComponentUpdate(nextProps: any, nextState: any): boolean;
  componentDidUpdate(prevProps: any, prevState: any): void;
  componentDidMount(): void;
  componentWillUnmount(): void;
  doRender(): JSX.Element;
  protected renderElement(): JSX.Element;
  get css(): any;
  set css(val: any);
  handleTryAgainClick(event: any): void;
  protected renderCompleted(): JSX.Element;
  protected renderCompletedBefore(): JSX.Element;
  protected renderLoading(): JSX.Element;
  protected renderSurvey(): JSX.Element;
  protected renderTimerPanel(location: string): JSX.Element;
  protected renderPage(page: PageModel): JSX.Element;
  protected renderProgress(isTop: boolean): JSX.Element;
  protected renderNavigation(navPosition: string): JSX.Element;
  protected renderEmptySurvey(): JSX.Element;
  protected createSurvey(newProps: any): void;
  protected updateSurvey(newProps: any, oldProps?: any): void;
  protected setSurveyEvents(): void;
  createQuestionElement(question: Question): JSX.Element;
  renderError(key: string, error: SurveyError, cssClasses: any): JSX.Element;
  questionTitleLocation(): string;
  questionErrorLocation(): string;
}
export declare class SurveyAction extends SurveyElementBase<IActionBarItemProps, any> {
  constructor(props: any);
  get item(): any;
  protected getStateElement(): Base;
  renderElement(): JSX.Element;
}
export declare class SurveyActionBar extends SurveyElementBase<IActionBarProps, any> {
  constructor(props: IActionBarProps);
  rootRef: any;
  get model(): any;
  componentDidMount(): void;
  componentWillUnmount(): void;
  protected getStateElement(): Base;
  renderElement(): any;
  renderItems(): any;
}
export declare class SurveyActionBarItem extends SurveyElementBase<IActionBarItemProps, any> {
  constructor(props: any);
  get item(): Action;
  protected getStateElement(): Base;
  renderElement(): JSX.Element;
  renderText(): JSX.Element;
  renderButtonContent(): JSX.Element;
  renderInnerButton(): JSX.Element;
}
export declare class SurveyButtonGroupItem extends SurveyElementBase<any, any> {
  constructor(props: any);
  model: ButtonGroupItemModel;
  get index(): number;
  get question(): QuestionButtonGroupModel;
  get item(): ButtonGroupItemValue;
  getStateElement(): ButtonGroupItemValue;
  render(): JSX.Element;
  protected renderIcon(): JSX.Element;
  protected renderInput(): JSX.Element;
  protected renderCaption(): JSX.Element;
}
export declare class SurveyPanelBase extends SurveyElementBase<any, any> {
  constructor(props: any);
  protected rootRef: any;
  protected getStateElement(): Base;
  protected canUsePropInState(key: string): boolean;
  protected get survey(): SurveyModel;
  protected get creator(): ISurveyCreator;
  protected get css(): any;
  get panelBase(): PanelModelBase;
  protected getPanelBase(): PanelModelBase;
  protected getSurvey(): SurveyModel;
  protected getCss(): any;
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  protected canRender(): boolean;
  renderedRowsCache: any;
  protected renderRows(css: any): Array<Element>;
  protected createRow(row: QuestionRowModel, css: any): JSX.Element;
}
export declare class SurveyProgress extends SurveyNavigationBase {
  constructor(props: any);
  protected get isTop(): boolean;
  protected get progress(): number;
  protected get progressText(): string;
  render(): JSX.Element;
}
export declare class SurveyProgressButtons extends SurveyNavigationBase {
  constructor(props: any);
  progressButtonsModel: SurveyProgressButtonsModel;
  updateScroller: any;
  listContainerRef: any;
  render(): JSX.Element;
  protected getListElements(): Array<Element>;
  protected renderListElement(page: PageModel, index: number): JSX.Element;
  protected isListElementClickable(index: number): boolean;
  protected getListElementCss(index: number): string;
  protected clickListElement(index: number): void;
  protected getScrollButtonCss(isLeftScroll: boolean): string;
  protected clickScrollButton(listContainerElement: JSX.Element, isLeftScroll: boolean): void;
  componentDidMount(): void;
  componentWillUnmount(): void;
}
export declare class SurveyQuestion extends SurveyElementBase<any, any> {
  constructor(props: any);
  isNeedFocus: boolean;
  static renderQuestionBody(creator: ISurveyCreator, question: Question): JSX.Element;
  rootRef: any;
  protected getStateElement(): Base;
  protected get question(): Question;
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  protected canRender(): boolean;
  protected renderQuestionContent(): JSX.Element;
  protected renderElement(): JSX.Element;
  protected wrapElement(element: JSX.Element): JSX.Element;
  protected wrapQuestionContent(element: JSX.Element): JSX.Element;
  protected renderQuestion(): JSX.Element;
  protected renderDescription(): JSX.Element;
  protected renderComment(cssClasses: any): JSX.Element;
  protected renderHeader(question: Question): JSX.Element;
  protected renderErrors(cssClasses: any, location: string): JSX.Element;
}
export declare class SurveyQuestionElementBase extends SurveyElementBase<any, any> {
  constructor(props: any);
  control: any;
  componentDidUpdate(prevProps: any, prevState: any): void;
  componentDidMount(): void;
  componentWillUnmount(): void;
  protected updateDomElement(): void;
  protected get questionBase(): Question;
  protected getRenderedElements(): Array<Base>;
  protected get creator(): ISurveyCreator;
  protected canRender(): boolean;
  shouldComponentUpdate(nextProps: any, nextState: any): boolean;
  protected get isDisplayMode(): boolean;
  protected wrapCell(cell: any, element: JSX.Element, reason: string): JSX.Element;
}
export declare class SurveyRow extends SurveyElementBase<any, any> {
  constructor(props: any);
  rootRef: any;
  protected getStateElement(): Base;
  protected get css(): any;
  protected canRender(): boolean;
  protected renderElementContent(): JSX.Element;
  protected renderElement(): JSX.Element;
  componentDidMount(): void;
  shouldComponentUpdate(nextProps: any, nextState: any): boolean;
  componentWillUnmount(): void;
  protected createElement(element: IElement, elementIndex?: number): JSX.Element;
}
export declare class SurveyActionBarItemDropdown extends SurveyActionBarItem {
  constructor(props: any);
  viewModel: ActionDropdownViewModel;
  renderButtonContent(): JSX.Element;
  componentWillUnmount(): void;
}
export declare class SurveyCustomWidget extends SurveyQuestionElementBase {
  constructor(props: any);
  widgetRef: any;
  componentDidMount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  componentWillUnmount(): void;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyElementErrors extends ReactSurveyElement {
  constructor(props: any);
  protected get id(): string;
  protected get element(): SurveyElement;
  protected get location(): string;
  protected canRender(): boolean;
  tooltipManager: TooltipManager;
  tooltipRef: any;
  componentDidUpdate(prevProps: any, prevState: any): void;
  componentWillUnmount(): void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyMultipleTextItem extends ReactSurveyElement {
  constructor(props: any);
  protected getStateElements(): any;
  protected renderElement(): JSX.Element;
  protected renderItemTooltipError(item: MultipleTextItemModel, cssClasses: any): JSX.Element;
}
export declare class SurveyNavigationButton extends ReactSurveyElement {
  constructor(props: any);
  protected get item(): Action;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyPage extends SurveyPanelBase {
  constructor(props: any);
  protected getPanelBase(): PanelModelBase;
  get page(): PageModel;
  protected renderElement(): JSX.Element;
  protected renderTitle(): JSX.Element;
  protected renderDescription(): JSX.Element;
}
export declare class SurveyPanel extends SurveyPanelBase {
  constructor(props: any);
  hasBeenExpanded: boolean;
  get panel(): PanelModel;
  protected renderElement(): JSX.Element;
  protected renderHeader(): JSX.Element;
  protected wrapElement(element: JSX.Element): JSX.Element;
  protected renderContent(style: any, rows: any, className: string): JSX.Element;
  protected renderTitle(): JSX.Element;
  protected renderDescription(): JSX.Element;
  protected renderBottom(): JSX.Element;
}
export declare class SurveyQuestionAndErrorsWrapped extends ReactSurveyElement {
  constructor(props: any);
  protected getStateElement(): Base;
  protected get question(): Question;
  protected get creator(): ISurveyCreator;
  protected getQuestion(): Question;
  protected get itemCss(): string;
  componentDidMount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  protected doAfterRender(): void;
  protected canRender(): boolean;
  protected renderErrors(errorsLocation: string): JSX.Element;
  protected renderContent(): JSX.Element;
  protected renderElement(): JSX.Element;
  protected getShowErrors(): boolean;
  protected renderQuestion(): JSX.Element;
}
export declare class SurveyQuestionBoolean extends SurveyQuestionElementBase {
  constructor(props: any);
  protected checkRef: any;
  protected getStateElement(): Base;
  protected get question(): QuestionBooleanModel;
  handleOnChange(event: any): void;
  handleOnClick(event: any): void;
  handleOnSwitchClick(event: any): void;
  handleOnLabelClick(event: any, value: boolean): void;
  handleOnKeyDown(event: any): void;
  protected updateDomElement(): void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionButtonGroup extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionButtonGroupModel;
  getStateElement(): QuestionButtonGroupModel;
  render(): JSX.Element;
  renderItems(): any;
}
export declare class SurveyQuestionCheckbox extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionCheckboxModel;
  protected renderElement(): JSX.Element;
  protected getHeader(): any;
  protected getFooter(): any;
  protected getColumnedBody(cssClasses: any): JSX.Element;
  protected getColumns(cssClasses: any): any;
  protected getBody(cssClasses: any): JSX.Element;
  protected getItems(cssClasses: any, choices: any): Array<any>;
  protected get textStyle(): any;
  protected renderOther(): JSX.Element;
  protected renderItem(key: string, item: any, isFirst: boolean, cssClasses: any, index: string): JSX.Element;
}
export declare class SurveyQuestionCheckboxItem extends ReactSurveyElement {
  constructor(props: any);
  protected getStateElement(): Base;
  protected get question(): QuestionCheckboxModel;
  protected get item(): ItemValue;
  protected get textStyle(): any;
  protected get isFirst(): any;
  protected get index(): number;
  shouldComponentUpdate(nextProps: any, nextState: any): boolean;
  handleOnChange: (event: any) => void;
  selectAllChanged: (event: any) => void;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
  protected get inputStyle(): any;
  protected renderCheckbox(isChecked: boolean, otherItem: JSX.Element): JSX.Element;
}
export declare class SurveyQuestionCommentItem extends ReactSurveyElement {
  constructor(props: any);
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionEmpty extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionEmptyModel;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionExpression extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionExpressionModel;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionFile extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionFileModel;
  protected renderElement(): JSX.Element;
  protected renderFileDecorator(): JSX.Element;
  protected renderClearButton(className: string): JSX.Element;
  protected renderFileSign(className: string, val: any): JSX.Element;
  protected renderPreview(): JSX.Element;
}
export declare class SurveyQuestionHtml extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionHtmlModel;
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionImage extends SurveyQuestionElementBase {
  constructor(props: any);
  componentDidMount(): void;
  componentWillUnmount(): void;
  protected get question(): QuestionImageModel;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionImagePicker extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionImagePickerModel;
  protected renderElement(): JSX.Element;
  protected getColumns(cssClasses: any): any;
  protected getItems(cssClasses: any): Array<any>;
  protected get textStyle(): any;
  protected renderItem(key: string, item: ImageItemValue, cssClasses: any): JSX.Element;
}
export declare class SurveyQuestionImagePickerItem extends ReactSurveyElement {
  constructor(props: any);
  protected getStateElement(): any;
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(prevProps: any, prevState: any): void;
  protected get cssClasses(): any;
  protected get item(): any;
  protected get question(): any;
  handleOnChange(event: any): void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrix extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionMatrixModel;
  componentDidMount(): void;
  componentWillUnmount(): void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrixActionsCell extends ReactSurveyElement {
  constructor(props: any);
  get model(): any;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrixDetailButton extends ReactSurveyElement {
  constructor(props: any);
  protected getStateElement(): any;
  get item(): Action;
  handleOnShowHideClick(event: any): void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrixDropdownBase extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionMatrixDropdownModelBase;
  componentDidMount(): void;
  componentWillUnmount(): void;
  protected renderElement(): JSX.Element;
  renderTableDiv(): JSX.Element;
  renderHeader(): JSX.Element;
  renderFooter(): JSX.Element;
  renderRows(): JSX.Element;
  renderRow(keyValue: any, row: QuestionMatrixDropdownRenderedRow, cssClasses: any): JSX.Element;
  renderCell(cell: QuestionMatrixDropdownRenderedCell, index: number, cssClasses: any): JSX.Element;
}
export declare class SurveyQuestionMatrixDynamicAddButton extends ReactSurveyElement {
  constructor(props: any);
  protected get matrix(): QuestionMatrixDynamicModel;
  handleOnRowAddClick(event: any): void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrixDynamicDragDropIcon extends ReactSurveyElement {
  constructor(props: any);
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrixDynamicRemoveButton extends ReactSurveyElement {
  constructor(props: any);
  handleOnRowRemoveClick(event: any): void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrixHeaderRequired extends ReactSurveyElement {
  constructor(props: any);
  get column(): MatrixDropdownColumn;
  get question(): Question;
  protected getStateElement(): Base;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionMatrixRow extends ReactSurveyElement {
  constructor(props: any);
  handleOnChange(event: any): void;
  protected wrapCell(cell: any, element: JSX.Element, reason: string): JSX.Element;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
  generateTds(): any;
  cellClick(row: any, column: any): void;
}
export declare class SurveyQuestionMultipleText extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionMultipleTextModel;
  protected renderElement(): JSX.Element;
  protected renderRow(rowIndex: number, items: any, cssClasses: any): JSX.Element;
}
export declare class SurveyQuestionOptionItem extends ReactSurveyElement {
  constructor(props: any);
  componentDidUpdate(prevProps: any, prevState: any): void;
  componentWillUnmount(): void;
  protected getStateElement(): Base;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionPanelDynamic extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionPanelDynamicModel;
  componentDidMount(): void;
  componentWillUnmount(): void;
  protected renderElement(): JSX.Element;
  protected renderNavigator(): JSX.Element;
  protected rendrerPrevButton(): JSX.Element;
  protected rendrerNextButton(): JSX.Element;
  protected renderRange(): JSX.Element;
  protected renderAddRowButton(): JSX.Element;
  protected renderNavigatorV2(): JSX.Element;
  protected renderPlaceholder(): JSX.Element;
}
export declare class SurveyQuestionPanelDynamicAction extends ReactSurveyElement {
  constructor(props: any);
  protected get question(): QuestionPanelDynamicModel;
}
export declare class SurveyQuestionRadioItem extends ReactSurveyElement {
  constructor(props: any);
  protected getStateElement(): Base;
  protected get question(): QuestionRadiogroupModel;
  protected get item(): ItemValue;
  protected get textStyle(): any;
  protected get index(): number;
  protected get isChecked(): boolean;
  shouldComponentUpdate(nextProps: any, nextState: any): boolean;
  handleOnChange(event: any): void;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionRadiogroup extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionRadiogroupModel;
  protected renderElement(): JSX.Element;
  protected getFooter(): any;
  protected getColumnedBody(cssClasses: any): JSX.Element;
  protected getColumns(cssClasses: any): any;
  protected getBody(cssClasses: any): JSX.Element;
  protected getItems(cssClasses: any, choices: any): Array<any>;
  protected get textStyle(): any;
  protected renderOther(cssClasses: any): JSX.Element;
}
export declare class SurveyQuestionRanking extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionRankingModel;
  protected renderElement(): JSX.Element;
  protected getItems(): Array<any>;
  protected renderItem(item: ItemValue, i: number, handleKeydown: (event: any) => void, handlePointerDown: (event: any) => void, cssClasses: any, itemClass: string, question: QuestionRankingModel): JSX.Element;
}
export declare class SurveyQuestionRankingItem extends ReactSurveyElement {
  constructor(props: any);
  protected get text(): string;
  protected get index(): string;
  protected get indexText(): string;
  protected get handleKeydown(): (event: any) => void;
  protected get handlePointerDown(): (event: any) => void;
  protected get cssClasses(): any;
  protected get itemClass(): string;
  protected get question(): any;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionRating extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionRatingModel;
  handleOnClick(event: any): void;
  protected renderElement(): JSX.Element;
  protected renderItem(key: string, item: RenderedRatingItem, index: number, cssClasses: any): JSX.Element;
}
export declare class SurveyQuestionSignaturePad extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): QuestionSignaturePadModel;
  protected renderElement(): JSX.Element;
  renderCleanButton(): JSX.Element;
}
export declare class SurveyQuestionUncontrolledElement<T> extends SurveyQuestionElementBase {
  constructor(props: any);
  protected get question(): T;
  updateValueOnEvent: (event: any) => void;
  protected setValueCore(newValue: any): void;
  protected getValueCore(): any;
  protected updateDomElement(): void;
}
export declare class SurveyTimerPanel extends ReactSurveyElement {
  constructor(props: any);
  protected getStateElement(): Base;
  protected get timerModel(): SurveyTimerModel;
  render(): JSX.Element;
}
export declare class SurveyWindow extends Survey {
  constructor(props: any);
  protected window: SurveyWindowModel;
  protected getStateElements(): Array<Base>;
  handleOnExpanded(event: any): void;
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
  protected renderWindowHeader(): JSX.Element;
  protected renderBody(): JSX.Element;
  protected createSurvey(newProps: any): void;
}
export declare class SurveyFlowPanel extends SurveyPanel {
  constructor(props: any);
  get flowPanel(): FlowPanelModel;
  componentDidMount(): void;
  componentWillUnmount(): void;
  protected getQuestion(name: string): Question;
  protected renderQuestion(question: Question): string;
  protected renderRows(): Array<Element>;
  renderedIndex: number;
  protected renderHtml(): JSX.Element;
  protected renderNodes(domNodes: any): Array<Element>;
  protected renderParentNode(node: any): JSX.Element;
  protected renderNode(node: any): JSX.Element;
  protected renderContent(style: any, rows: any): JSX.Element;
}
export declare class SurveyMultipleTextItemEditor extends SurveyQuestionAndErrorsWrapped {
  constructor(props: any);
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionAndErrorsCell extends SurveyQuestionAndErrorsWrapped {
  constructor(props: any);
  protected cellRef: any;
  componentWillUnmount(): void;
  protected renderElement(): JSX.Element;
  protected getCellStyle(): any;
  protected getHeaderText(): string;
  protected wrapCell(cell: QuestionMatrixDropdownRenderedCell, element: JSX.Element): JSX.Element;
}
export declare class SurveyQuestionBooleanCheckbox extends SurveyQuestionBoolean {
  constructor(props: any);
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionBooleanRadio extends SurveyQuestionBoolean {
  constructor(props: any);
  handleOnChange: (event: any) => void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionComment extends SurveyQuestionUncontrolledElement<QuestionCommentModel> {
  constructor(props: any);
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionComposite extends SurveyQuestionUncontrolledElement<QuestionCompositeModel> {
  constructor(props: any);
  protected canRender(): boolean;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionCustom extends SurveyQuestionUncontrolledElement<QuestionCustomModel> {
  constructor(props: any);
  protected getStateElements(): Array<Base>;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionDropdownBase<T> extends SurveyQuestionUncontrolledElement<T> {
  constructor(props: any);
  click: (event: any) => void;
  clear: (event: any) => void;
  keyup: (event: any) => void;
  blur: (event: any) => void;
  protected setValueCore(newValue: any): void;
  protected getValueCore(): any;
  protected renderSelect(cssClasses: any): JSX.Element;
  createClearButton(): JSX.Element;
}
export declare class SurveyQuestionMatrixDropdown extends SurveyQuestionMatrixDropdownBase {
  constructor(props: any);
}
export declare class SurveyQuestionMatrixDynamic extends SurveyQuestionMatrixDropdownBase {
  constructor(props: any);
  protected get matrix(): QuestionMatrixDynamicModel;
  handleOnRowAddClick(event: any): void;
  protected renderElement(): JSX.Element;
  protected renderAddRowButtonOnTop(cssClasses: any): JSX.Element;
  protected renderAddRowButtonOnBottom(cssClasses: any): JSX.Element;
  protected renderNoRowsContent(cssClasses: any): JSX.Element;
  protected renderAddRowButton(cssClasses: any, isEmptySection?: boolean): JSX.Element;
}
export declare class SurveyQuestionPanelDynamicAddButton extends SurveyQuestionPanelDynamicAction {
  constructor(props: any);
  protected handleClick: (event: any) => void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionPanelDynamicItem extends SurveyPanel {
  constructor(props: any);
  protected getSurvey(): SurveyModel;
  protected getCss(): any;
  render(): JSX.Element;
  protected renderButton(): JSX.Element;
}
export declare class SurveyQuestionPanelDynamicNextButton extends SurveyQuestionPanelDynamicAction {
  constructor(props: any);
  protected handleClick: (event: any) => void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionPanelDynamicPrevButton extends SurveyQuestionPanelDynamicAction {
  constructor(props: any);
  protected handleClick: (event: any) => void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionPanelDynamicProgressText extends SurveyQuestionPanelDynamicAction {
  constructor(props: any);
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionPanelDynamicRemoveButton extends SurveyQuestionPanelDynamicAction {
  constructor(props: any);
  protected handleClick: (event: any) => void;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionText extends SurveyQuestionUncontrolledElement<QuestionTextModel> {
  constructor(props: any);
  _isWaitingForEnter: boolean;
  protected renderInput(): JSX.Element;
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionDropdown extends SurveyQuestionDropdownBase<Question> {
  constructor(props: any);
  protected renderElement(): JSX.Element;
  protected renderOther(cssClasses: any): JSX.Element;
}
export declare class SurveyQuestionMatrixDropdownCell extends SurveyQuestionAndErrorsCell {
  constructor(props: any);
  protected getQuestion(): Question;
  protected doAfterRender(): void;
  protected getShowErrors(): boolean;
  protected getCellStyle(): any;
  protected getHeaderText(): string;
  protected renderQuestion(): JSX.Element;
}
export declare class SurveyQuestionRatingDropdown extends SurveyQuestionDropdownBase<QuestionRatingModel> {
  constructor(props: any);
  protected renderElement(): JSX.Element;
}
export declare class SurveyQuestionDropdownSelect extends SurveyQuestionDropdown {
  constructor(props: any);
  protected renderSelect(cssClasses: any): JSX.Element;
}
export declare function property(options?: any): (target: any, key: string) => void;
export declare function propertyArray(options?: IArrayPropertyDecoratorOptions): (target: any, key: string) => void;
export declare function showModal(componentName: string, data: any, onApply: any, onCancel?: any, cssClass?: string, title?: string, displayMode?: "popup" | "overlay"): void;
export declare function attachKey2click(element: JSX.Element, viewModel?: any, options?: IAttachKey2clickOptions): JSX.Element;
export declare var registerFunction: (name: string, func: any) => any;